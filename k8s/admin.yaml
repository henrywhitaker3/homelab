---
- name: Configure k8s admin server

  hosts: k8s_admin

  roles:
    - k8s_tools

  vars_files:
    - vars/admin.yaml

  tasks:
    - name: Set rke facts
      tags:
        - k8s
        - rke
      set_fact:
        rke_binary: "/home/{{ ansible_user }}/rke-{{ rke_version }}"

    - name: Is rke already there?
      tags:
        - k8s
        - rke
      stat:
        path: "{{ rke_binary }}"
      register: rke_binary_exists

    - name: Download rke binary
      tags:
        - k8s
        - rke
      get_url:
        url: "https://github.com/rancher/rke/releases/download/{{ rke_version }}/rke_linux-amd64"
        dest: "{{ rke_binary }}"
        mode: 0755
      when: not rke_binary_exists.stat.exists

    - name: Copy over rke cluster definition
      tags:
        - k8s
        - rke
      template:
        src: templates/cluster.yaml
        dest: "/home/{{ ansible_user }}/cluster.yml"
      register: cluster_def_copy

    - name: Run rke up
      tags:
        - k8s
        - rke
      shell: "{{ rke_binary }} up"
      when: cluster_def_copy.changed

    - name: Create .kube dir
      tags:
        - k8s
        - rke
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0700

    - name: Copy kubeconfig
      tags:
        - k8s
        - rke
      copy:
        src: "/home/{{ ansible_user }}/kube_config_cluster.yml"
        remote_src: true
        dest: "/home/{{ ansible_user }}/.kube/config"
        mode: 0700

    - name: Copy argo over
      tags:
        - k8s
        - argo
      synchronize:
        src: argo
        dest: "/home/{{ ansible_user }}/"
        delete: true
        recursive: true
        archive: false
        checksum: true

    - name: Create argo namespace
      tags:
        - k8s
        - argo
      shell: "kubectl create namespace argo"
      register: argo_namespace_created
      changed_when: "'created' in argo_namespace_created.stdout"
      failed_when: false

    - name: Is argo installed?
      tags:
        - k8s
        - argo
      shell: "helm -n argo status argo"
      register: argo_helm_status
      changed_when: false
      failed_when: false

    - name: Install argo controller
      tags:
        - k8s
        - argo
      shell: "helm upgrade --install -n argo -f /home/{{ ansible_user }}/argo/argocd/values.yaml argo /home/{{ ansible_user }}/argo/argocd"
      when: "'not found' in argo_helm_status.stderr"

    - name: Is argo apps installed?
      tags:
        - k8s
        - argo
      shell: "kubectl -n argo get applications"
      changed_when: false
      register: argo_apps_status

    - name: Wait a bit for the install
      tags:
        - k8s
        - argo
      pause:
        seconds: 30
      when: "'No resources found' in argo_apps_status.stderr"

    - name: Install argo apps
      tags:
        - k8s
        - argo
      shell: "helm -n argo -f /home/{{ ansible_user }}/argo/apps/values.yaml template /home/{{ ansible_user }}/argo/apps | kubectl apply -f -"
      when: "'No resources found' in argo_apps_status.stderr"

    - name: Delete helm labels from apps install
      tags:
        - k8s
        - argo
      shell: "kubectl -n argo delete secret -l owner=helm,name=argocd"
      when: "'No resources found' in argo_apps_status.stderr"

    - name: Wait a bit for the apps to install
      tags:
        - k8s
        - argo
      pause:
        seconds: 45
      when: "'No resources found' in argo_apps_status.stderr"

    - name: Install standalone manifests
      tags:
        - k8s
        - standalone
      shell: "kubectl apply -f /home/{{ ansible_user }}/argo/standalone/"
      register: apply_standalone_manifests
      changed_when: "'created' in apply_standalone_manifests.stdout"
