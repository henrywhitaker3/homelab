namespaceOverride: monitoring

cleanPrometheusOperatorObjectNames: true

alertmanager:
  enabled: true

  alertmanagerSpec:
    replicas: 2
    useExistingSecret: true
    configSecret: alertmanager-config

  ingress:
    enabled: true

    ingressClassName: internal

    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod

      nginx.ingress.kubernetes.io/auth-method: 'GET'
      nginx.ingress.kubernetes.io/auth-url: 'https://auth.plexmox.com/api/authz/auth-request'
      nginx.ingress.kubernetes.io/auth-signin: 'https://auth.plexmox.com?rm=$request_method'
      nginx.ingress.kubernetes.io/auth-response-headers: 'Remote-User,Remote-Name,Remote-Groups,Remote-Email'

    hosts:
      - alerts.plexmox.com

    tls:
      - secretName: alerts-plexmox-com-tls
        hosts:
          - alerts.plexmox.com

nodeExporter:
  enabled: false

kubelet:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # Drop high cardinality labels
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: drop
        sourceLabels: ["__name__"]
        regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count|apiserver_watch_cache_read_wait_seconds_bucket)
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd)_request(|_sli|_slo)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_request_body_size_bytes_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_(response|watch_events)_sizes_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (kubelet_runtime_operations|storage_operation)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd)_request_total
      - action: drop
        sourceLabels: ["__name__"]
        regex: (etcd|apiserver)_request_duration_seconds_(count|sum)
    probesMetricRelabelings:
      - action: drop
        sourceLabels: ["__name__"]
        regex: prober_probe_duration_seconds_bucket
    cAdvisorMetricRelabelings:
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: labeldrop
        regex: (endpoint|instance)

kubeApiServer:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # Drop high cardinality labels
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_watch_cache_read_wait_seconds_bucket|apiserver_admission_controller_admission_duration_seconds_bucket)
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_request_body_size_bytes_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: workqueue_(queue|work)_duration_seconds_bucket

kubeEtcd:
  enabled: true
  endpoints:
    - 10.0.0.20
    - 10.0.0.21
    - 10.0.0.24
  serviceMonitor:
    metricRelabelings:
      - action: drop
        sourceLabels: ["__name__"]
        regex: (etcd_request_duration_seconds_bucket)

kubeControllerMnager:
  enabled: true
  endpoints:
    - 10.0.0.20
    - 10.0.0.21
    - 10.0.0.24

kubeProxy:
  enabled: true
  endpoints:
    - 10.0.0.20
    - 10.0.0.21
    - 10.0.0.24

kubeScheduler:
  enabled: true
  endpoints:
    - 10.0.0.20
    - 10.0.0.21
    - 10.0.0.24

defaultRules:
  rules:
    kubeControllerManager: false
    kubeProxy: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false

grafana:
  enabled: false
  forceDeployDashboards: true

prometheus:
  ingress:
    enabled: true

    ingressClassName: internal

    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod

      nginx.ingress.kubernetes.io/auth-method: 'GET'
      nginx.ingress.kubernetes.io/auth-url: 'https://auth.plexmox.com/api/authz/auth-request'
      nginx.ingress.kubernetes.io/auth-signin: 'https://auth.plexmox.com?rm=$request_method'
      nginx.ingress.kubernetes.io/auth-response-headers: 'Remote-User,Remote-Name,Remote-Groups,Remote-Email'

    hosts:
      - prometheus.plexmox.com

    tls:
      - secretName: prometheus-plexmox-com-tls
        hosts:
          - prometheus.plexmox.com

  # thanosService:
  #   enabled: true
  # thanosServiceMonitor:
  #   enabled: true

  prometheusSpec:
    replicas: 2
    replicaExternalLabelName: __replica__

    enableRemoteWriteReceiver: true
    scrapeConfigSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false

    # thanos:
    #   objectStorageConfig:
    #     existingSecret:
    #       name: thanos-objstore-config
    #       key: config.yaml

    externalLabels:
      cluster: main

    retention: 14d
    retentionSize: 25GB

    walCompression: true

    enableFeatures:
      - memory-snapshot-on-shutdown
      - new-service-discovery-manager

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn-no-backups
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
