version: "3"

tasks:
  .context:
    requires:
      vars:
        - cluster
    cmds:
      - kubectl config use-context {{ .cluster }}

  bootstrap:
    desc: Bootsrap the cluster
    requires:
      vars:
        - cluster
    cmds:
      - task: .context
      - ./scripts/bootstrap_secrets.sh {{ .cluster }}
      - task: install
      - task: root

  repo:
    desc: Install the argo helm repo
    cmds:
      - helm repo add argo https://argoproj.github.io/argo-helm

  install:
    desc: Install argocd into the cluster
    requires:
      vars:
        - cluster
    cmds:
      - task: .context
      - helm dependency build kubernetes/{{ .cluster }}/bootstrap/argo
      - helm upgrade --install --create-namespace --wait -n argo -f kubernetes/{{ .cluster }}/bootstrap/argo/values.yaml argo kubernetes/{{ .cluster }}/bootstrap/argo/

  root:
    desc: Apply the initial manifests
    requires:
      vars:
        - cluster
    cmds:
      - task: .context
      - kubectl apply -f kubernetes/{{ .cluster}}/bootstrap/manifests

  apps:
    desc: List argo apps
    cmds:
      - task: .context
      - kubectl -n argo get applications

  go:
    desc: Bootstrap the entire cluster, install argo, install manifests
    cmds:
      - task: .context
      - task: bootstrap
      - task: install
      - task: root

  exec:
    vars:
      run: '{{ .run | default "/bin/bash" }}'
      vars:
      pod:
        sh: kubectl -n argo get pod -l app.kubernetes.io/name=argocd-server -o json | jq -r '.items[0].metadata.name'
    cmds:
      - task: .context
      - kubectl -n argo exec -it {{ .pod }} -- {{ .run }}

  login:
    cmds:
      - task: .context
      - task: exec
        vars:
          run: argocd login argo-argocd-server.argo.svc --insecure --insecure --username $ARGO_CD_USER --password $ARGO_CD_PASSWORD

  diff:
    desc: Run a diff on the argo app
    deps: [login]
    requires:
      vars:
        - app
        - dir
    vars:
      pod:
        sh: kubectl -n argo get pod -l app.kubernetes.io/name=argocd-server -o json | jq -r '.items[0].metadata.name'
    cmds:
      - task: .context
      - kubectl -n argo cp {{ .dir }} {{ .pod }}:/tmp/{{ .app }}
      - task: exec
        vars:
          run: argocd app diff {{ .app }} --local /tmp/{{ .app }} --loglevel error
      - task: exec
        vars:
          run: rm -r /tmp/{{ .app }}

  refresh:
    desc: Trigger a refresh on an app
    deps: [login]
    requires:
      vars:
        - app
    cmds:
      - task: .context
      - task: exec
        vars:
          run: argocd app get {{ .app }} --refresh
